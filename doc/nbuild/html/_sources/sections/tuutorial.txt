{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "# Tutorial"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This Python notebook demonstrates how OASIS can be used to efficiently evaluate a classifier, based on an example dataset from the entity resolution domain."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We begin by loading the required packages (including OASIS) and setting the random seeds for reproducability."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import random\n",
    "import oasis\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "\n",
    "np.random.seed(319158)\n",
    "random.seed(319158)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "## Example dataset"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The dataset we shall use for this tutorial is derived from the `Amazon-GoogleProducts` dataset available from [here](http://dbs.uni-leipzig.de/en/research/projects/object_matching/fever/benchmark_datasets_for_entity_resolution). It is described in the following publication:\n",
    "\n",
    "> H. KÃ¶pcke, A. Thor, and E. Rahm. \"Evaluation of entity resolution approaches on real-world match problems.\" *Proceedings of the VLDB Endowment* 3.1-2 (2010): 484-493.\n",
    "\n",
    "The dataset consists of product listings from two e-commerce websites: *Amazon* and *Google Products* (which no longer exists as of 2017). Our goal is to train a classifier to identify pairs of records across the two data sources which refer to the same products. This involves forming the cross join of the two data sources and classifying each pair of records as a \"match\" or \"non-match\". Since the focus of this notebook is evaluation, we shall not demonstrate how to build the classifier here. Instead, we shall load the data from a classifier we prepared earlier."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Loading the data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Using our pre-trained classifier, we calculated predictions and scores on a test set containing 676,267 record pairs. The data is stored in HDF5 format and is available in the GitHub repository.\n",
    "\n",
    "Below, we make use of the ``Data`` class in the OASIS package to read the HDF file into memory."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "data = oasis.Data()\n",
    "data.read_h5('Amazon-GoogleProducts-test.h5')\n",
    "data.calc_true_performance() #: calculate true precision, recall, F1-score"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true,
    "deletable": true,
    "editable": true
   },
   "source": [
    "## Evaluating the classifier"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Our goal is to estimate the F1-score of the classifier by sequentially labelling items in the test set. This example is somewhat contrived since we already know the ground truth labels (they are included with the test set). However, we can simulate the labelling by defining an oracle which looks up the labels as follows:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": true,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "def oracle(idx):\n",
    "    return data.labels[idx]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In the following experiments, we shall adopt the parameter settings below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": true,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "alpha = 0.5      #: corresponds to F1-score\n",
    "n_labels = 5000  #: stop sampling after querying this number of labels\n",
    "max_iter = 1e6   #: maximum no. of iterations that can be stored"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "### OASIS"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here we use the OASIS method to estimate the F1-score. The first step is to initialise the sampler."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Automatically setting n_bins = 2398.\n",
      "Automatically setting goal_num_strata = 63.\n"
     ]
    }
   ],
   "source": [
    "smplr = oasis.OASISSampler(alpha, data.preds, data.scores, oracle, max_iter=max_iter)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next we query ``n_labels`` sequentially."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "smplr.sample_distinct(n_labels)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, we plot the history of estimates to check for convergence. Since we already know the true value of the F1-score for this example (because we were given all of the labels in advance), we have indicated it on the plot using a red line. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\nZ+AAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fd9bad67a20>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "def plt_estimates(smplr, true_value):\n",
    "    plt.plot(smplr.estimate_[smplr.queried_oracle_])\n",
    "    plt.axhline(y=true_value, color='r')\n",
    "    plt.xlabel(\"Label budget\")\n",
    "    plt.ylabel(\"Estimate of F1-score\")\n",
    "    plt.ylim(0,1)\n",
    "    plt.show()\n",
    "\n",
    "plt_estimates(smplr, data.F1_measure)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "### Other samplers"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For comparison, we repeat the evaluation using two alternative sampling methods available in the OASIS package."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First, we test the basic passive sampling method. It performs poorly due to the extreme class imbalance. Of the 5000 labels queried, none of them correspond to a true positive, yielding an incorrect estimate for the F1-score of 0.0."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fd9bad67630>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "pass_smplr = oasis.PassiveSampler(alpha, data.preds, oracle, max_iter=max_iter)\n",
    "pass_smplr.sample_distinct(n_labels)\n",
    "plt_estimates(pass_smplr, data.F1_measure)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "The non-adaptive importance sampling method fares better, yielding a decent estimate after consuming 5000 labels. However, it takes significantly longer to converge than OASIS."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\nXP4/AS/tz9rGJJMAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fd9b9b5fa90>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "is_smplr = oasis.ImportanceSampler(alpha, data.preds, data.scores, oracle, max_iter=max_iter)\n",
    "is_smplr.sample_distinct(n_labels)\n",
    "plt_estimates(is_smplr, data.F1_measure)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
